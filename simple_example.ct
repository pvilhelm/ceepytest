#include <stdint.h> 

/*
 * Ceepy Test
 *
 * This is a simple example without external files linked in.
 */
 
/* Lets define some functions to test */

int add(int a, int b){
	return a+b;
} 

/* 
 * Normally these functions are declared in a header with a .c-file
 * but for clarity they are included in the test it self 
 */

int mult(int a, int b){
	return a*b;
}

float fmax(float a, float b){
	// NAN will mess this up
	return a < b ? b : a;	
}

/*
 * For better test feedback, functions return types need to be specified.
 * /_*_! starts a Ceepy !-block, declare blocks.
 * § is a one line Ceepy comment in a Ceepy block
 */
 
/*!
int add()	  	§ If you "redefine" a function like this, Ceepy will print return values nicely.
int mult()  	§ Otherwise, test values will be "preprocessed" inte to the C-file verbatim. 
float fmax();	§ Ending the statement with ";" is legal but optional
!*/             

/* 
 * Declare assertions with the Ceepy ?-block. The right hand side will be eval:ed 
 * in as Python syntax and converted to a string if it has the prefix #.
 * Both C++-style comments and C-style comments with the block marker is legal. 
 *
 * All assert blocks in file scope will be evaluated in the order they are written,
 * and the tests are put in the button of the file. 
 */

//? add(1,1) == 2    				§ Assert that 1+1 == 2 for our function
//? add(1234,4321) == #1234+4321   	§ To much math for me, lets use Python inline 

/* Multi line assert-block treats each line as a separate assertion */

/*? 
add(INT32_MAX,1) == INT32_MIN 		§ Overflows to INT32_MIN
add(INT32_MAX,INT32_MAX) == -2      § Same thing as INT32_MAX << 1	
?*/ 
 
/* Lets test mult() also */

/*?
mult(1,1) == mult(1,1)  § Both side can have expressions
mult(0,INT32_MAX) == 0
mult(-100,123) == # -100*123
mult(INT32_MAX,INT32_MIN) == INT32_MIN
?*/

/*?
fmax(1,2) == 2
fmax(-1,-0.5) == -0.5
fmax(10,11) < fmax(20,21)
?*/

/* 
 * For some test it's nice to write a c-function instead. This can be
 * done with functions in the file with name's beginning with test_
 * that returns a int and takes zero arguments.
 */
 
int test_mult(){
	for(int i = 0; i < 10; i++){
		//% mult(i,i) == i*i
	}
	return 0;
}

/*
 * Now run "py ceepy -f PATH/simple_example.ct -t PATH/TO/TARGET/FOLDER"
 * Then compile the .c files either manually (link in asserts.h and .c)
 * or run the .bat file
 *
 * Then execute the test.exe
 */

